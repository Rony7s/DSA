
..............................BFS......................................
#include<stdio.h>
#define MAX  5
void bfs(int adj[][MAX],int visited[],int start)
{
int queue[MAX],rear=-1,front=-1,i,k;
    for(k=0;k<MAX;k++)
        visited[k]=0;
    queue[++rear]=start;
    ++front;
    visited[start]=1;
    while(rear>=front)
    {
        start=queue[front++];
        if(start==4)
        {
printf("%c",start+65);
        }
else{
printf("%c-",start+65);
        }
       // printf("%c-",start+65);
        for(i=0;i<MAX;i++)
        {
            if(adj[start][i]!=0&&visited[i]==0)
            {
                queue[++rear]=i;
                visited[i]=1;
            }
        }
    }
}
int main()
{
int visited[MAX]={0};
int adj[MAX][MAX],i,j;
int option,size;
    do
    {
printf("\n1.Enter values in graph");
printf("\n2.BFS traversal");
printf("\n3.Exit");
printf("\n\nEnter the option");
scanf("%d",&option);
        switch(option)
        {
            case 1:printf("\nEnter the adjacency matrix:");
            for(i=0;i<MAX;i++)
            for(j=0;j<MAX;j++)
scanf("%d",&adj[i][j]);
            break;
default:printf("\nBFS traversal");
bfs(adj,visited,0);
            break;
        }
}while(option!=3);

return 0;
    
}

..............................DFS......................................
#include<stdio.h>

#define MAX  5
//dfs function
void dfs(int adj[][MAX],int visited[],int start)
{
int stack[MAX],top=-1,i,k;
    for(k=0;k<MAX;k++)
        visited[k]=0;
        stack[++top]=start;
        visited[start]=1;
        while(top!=-1)
        {
            start=stack[top--];
printf("%c-",start+65);
            for(i=0;i<MAX;i++)
        {
            if(adj[start][i]!=0&&visited[i]==0)
            {
                stack[++top]=i;
                visited[i]=1;
                break;
            }
        }
        }
}
int main()
{
int visited[MAX]={0};
int adj[MAX][MAX],i,j;
int option,size;
    do
    {
printf("\n1.Enter values in graph");
printf("\n2.DFS traversal");
printf("\n3.Exit");
printf("\n\nEnter the option");
scanf("%d",&option);
        switch(option)
        {
            case 1:printf("\nEnter the adjacency matrix:");
            for(i=0;i<MAX;i++)
            for(j=0;j<MAX;j++)
scanf("%d",&adj[i][j]);
            break;
            case 2:printf("\nDFS traversal");Output:
dfs(adj,visited,0);
            break;
        }
}while(option!=4);

    return 0;
}

..............................Floyd Warshall Algorithm......................................

#include <stdio.h>
#define nV 4
#define INF 999
void printMatrix(int matrix[][nV]);
void floydWarshall(int graph[][nV]) {
  int matrix[nV][nV], i, j, k;
  for (i = 0; i < nV; i++)
    for (j = 0; j < nV; j++)
      matrix[i][j] = graph[i][j];
  for (k = 0; k < nV; k++) {
    for (i = 0; i < nV; i++) {
      for (j = 0; j < nV; j++) {
        if (matrix[i][k] + matrix[k][j] < matrix[i][j])
          matrix[i][j] = matrix[i][k] + matrix[k][j];
      }
    }
  }
  printMatrix(matrix);
}
void printMatrix(int matrix[][nV]) {
  for (int i = 0; i < nV; i++) {
    for (int j = 0; j < nV; j++) {
      if (matrix[i][j] == INF)
        printf(" %4s", "INF");
      else
        printf("%4d", matrix[i][j]);
    }
    printf("\n");
  }
}

int main() {
  int graph[nV][nV] = {{0, 3, INF, 5},
             {2, 0, INF, 4},
             {INF, 1, 0, INF},
             {INF, INF, 2, 0}};
  floydWarshall(graph);
}